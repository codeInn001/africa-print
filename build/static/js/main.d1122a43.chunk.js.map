{"version":3,"sources":["components/minter/Cover.js","components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/Wallet.js","hooks/useContract.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","App.js","hooks/useBalance.js","hooks/useMinterContract.js","hooks/useMarketplaceContract.js","reportWebVitals.js","index.js"],"names":["Cover","name","coverImg","connect","className","style","backgroundImage","minHeight","maxWidth","src","alt","Button","onClick","catch","e","console","log","variant","backgroundColor","cursor","defaultProps","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","width","height","Wallet","amount","symbol","destroy","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","useContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","a","kit","web3","eth","Contract","client","ipfsHttpClient","createNft","minterContract","marketplaceContract","performActions","price","description","ipfsImage","ownerAddress","attributes","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","methods","mint","send","from","transaction","africaPrintCount","BigNumber","events","Transfer","returnValues","tokenId","africaPrintPrice","ethers","utils","parseUnits","String","approve","NFTMarketplaceContractAddress","NFTMarketplace","listAfricaPrint","MyNFTContractAddress","MyNFT","uploadToIpfs","file","files","progress","prog","getNfts","nfts","getAfricaPrintCount","call","nftsLength","i","nft","Promise","resolve","getAfricaPrint","africaPrint","tokenURI","res","fetchNftMeta","meta","index","seller","sold","forSale","push","Number","all","ipfsUrl","axios","get","purchaseItem","buyAfricaPrint","value","error","toggleForsale","toggleForSale","changePrice","newPrice","newAfricaPrintPrice","modifyAfricaPrintPrice","AFRICAPRINTSTYPE","AddNfts","save","setName","setPrice","setIpfsImage","setDescription","setAttributes","show","setShow","handleClose","setAttributesFunc","trait_type","attributeObject","arr","findIndex","el","oldArray","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","type","placeholder","onChange","imageUrl","alert","Label","hidden","map","africaPrintsType","toLowerCase","Footer","disabled","NftCard","isSold","isOwner","modPrice","isForsale","contractOwner","setnewPrice","editPrice","setEditprice","showEditButton","setShowEditButton","Col","Card","Badge","bg","objectFit","Text","Row","attribute","key","classNmae","prevState","handleChangePrice","Loader","role","NftList","setNfts","loading","setLoading","getAssets","allNfts","addNft","toast","buy","toggleSale","modifyPrice","Add","xs","sm","lg","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","MyNFTAbi","NFTMarketplaceAbi","Container","fluid","Nav","CELO","updateBalance","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.d1122a43.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button } from \"react-bootstrap\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cover = ({ name, coverImg, connect }) => {\r\n  if (name) {\r\n    return (\r\n      <div\r\n        className=\"d-flex justify-content-center flex-column text-center \"\r\n        style={{ backgroundImage: \"linear-gradient(to bottom, rgba(0, 0, 0, 0.97), rgba(0, 0, 0, 0.97)), url('https://drive.google.com/uc?export=view&id=1KitFsBbAxmk9-PfO2SGLaA5SCaWCMr8s')\", minHeight: \"100vh\" }}\r\n      >\r\n        <div className=\"mt-auto text-light mb-5\">\r\n          <div\r\n            className=\" ratio ratio-1x1 mx-auto mb-2\"\r\n            style={{ maxWidth: \"320px\" }}\r\n          >\r\n            <img src={coverImg} alt=\"\" />\r\n          </div>\r\n          <h1>{name}</h1>\r\n          <p>Please connect your wallet to continue.</p>\r\n          <Button\r\n            onClick={() => connect().catch((e) => console.log(e))}\r\n            variant=\"outline-light\"\r\n            className=\"rounded-pill px-3 mt-3\"\r\n            style={{backgroundColor: \"#55efc4\", backgroundImage:\"linear-gradient(315deg, #000428 0%, #004e92 74%)\", cursor: \"pointer\"}}\r\n          >\r\n            Connect Wallet\r\n          </Button>\r\n        </div>\r\n\r\n        <p className=\"mt-auto text-secondary\">Powered by Celo</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nCover.propTypes = {\r\n  name: PropTypes.string,\r\n};\r\n\r\nCover.defaultProps = {\r\n  name: \"\",\r\n};\r\n\r\nexport default Cover;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ToastContainer } from \"react-toastify\";\r\n\r\nconst Notification = () => (\r\n  <ToastContainer\r\n    position=\"bottom-center\"\r\n    autoClose={5000}\r\n    hideProgressBar\r\n    newestOnTop\r\n    closeOnClick\r\n    rtl={false}\r\n    pauseOnFocusLoss\r\n    draggable={false}\r\n    pauseOnHover\r\n  />\r\n);\r\n\r\nconst NotificationSuccess = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst NotificationError = ({ text }) => (\r\n  <div>\r\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\r\n    <span className=\"text-secondary mx-1\">{text}</span>\r\n  </div>\r\n);\r\n\r\nconst Props = {\r\n  text: PropTypes.string,\r\n};\r\n\r\nconst DefaultProps = {\r\n  text: \"\",\r\n};\r\n\r\nNotificationSuccess.propTypes = Props;\r\nNotificationSuccess.defaultProps = DefaultProps;\r\n\r\nNotificationError.propTypes = Props;\r\nNotificationError.defaultProps = DefaultProps;\r\n\r\nexport { Notification, NotificationSuccess, NotificationError };\r\n","import {ERC20_DECIMALS} from \"./constants\";\r\n\r\n// format a wallet address\r\nexport const truncateAddress = (address) => {\r\n    if (!address) return\r\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\r\n}\r\n\r\n// convert from big number\r\nexport const formatBigNumber = (num) => {\r\n    if (!num) return\r\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\r\n}","const ERC20_DECIMALS = 18;\r\nexport { ERC20_DECIMALS };\r\n","import { useEffect, useRef } from \"react\";\r\nimport Jazzicon from \"@metamask/jazzicon\";\r\n\r\nexport default function Identicon({ address, size, ...rest }) {\r\n  const ref = useRef();\r\n\r\n  useEffect(() => {\r\n    if (address && ref.current) {\r\n      ref.current.innerHTML = \"\";\r\n      ref.current.appendChild(\r\n        Jazzicon(size, parseInt(address.slice(2, 10), 16))\r\n      );\r\n    }\r\n  }, [address, size]);\r\n\r\n  return (\r\n    <div {...rest}>\r\n      <div ref={ref} style={{ width: `${size}px`, height: `${size}px` }} />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { Dropdown, Stack, Spinner } from \"react-bootstrap\";\r\nimport { formatBigNumber, truncateAddress } from \"./../utils\";\r\nimport Identicon from \"./ui/Identicon\";\r\n\r\nconst Wallet = ({ address, amount, symbol, destroy }) => {\r\n  if (address) {\r\n    return (\r\n      <>\r\n        <Dropdown>\r\n          <Dropdown.Toggle\r\n            variant=\"dark\"\r\n            align=\"end\"\r\n            id=\"dropdown-basic\"\r\n            className=\"d-flex align-items-center border rounded-pill py-1\"\r\n          >\r\n            {amount ? (\r\n              <>\r\n                {formatBigNumber(amount)}{\" \"}\r\n                <span className=\"ms-1\"> {symbol}</span>\r\n              </>\r\n            ) : (\r\n              <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\" />\r\n            )}\r\n            <Identicon address={address} size={28} className=\"ms-2 me-1\" />\r\n          </Dropdown.Toggle>\r\n\r\n          <Dropdown.Menu className=\"shadow-lg border-0\">\r\n            <Dropdown.Item\r\n              href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}\r\n              target=\"_blank\"\r\n            >\r\n              <Stack direction=\"horizontal\" gap={2}>\r\n                <i className=\"bi bi-person-circle fs-4\" />\r\n                <span className=\"font-monospace\">\r\n                  {truncateAddress(address)}\r\n                </span>\r\n              </Stack>\r\n            </Dropdown.Item>\r\n            <Dropdown.Divider />\r\n            <Dropdown.Item\r\n              as=\"button\"\r\n              className=\"d-flex align-items-center\"\r\n              onClick={() => {\r\n                destroy();\r\n              }}\r\n            >\r\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\" />\r\n              Disconnect\r\n            </Dropdown.Item>\r\n          </Dropdown.Menu>\r\n        </Dropdown>\r\n      </>\r\n    );\r\n  }\r\n\r\n  return null;\r\n};\r\n\r\nexport default Wallet;\r\n","import { useState, useEffect, useCallback } from 'react';\r\nimport { useContractKit } from '@celo-tools/use-contractkit';\r\n\r\nexport const useContract = (abi, contractAddress) => {\r\n  const { getConnectedKit, address } = useContractKit();\r\n  const [contract, setContract] = useState(null);\r\n\r\n  const getContract = useCallback(async () => {\r\n    const kit = await getConnectedKit();\r\n\r\n    // get a contract interface to interact with\r\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\r\n  }, [getConnectedKit, abi, contractAddress]);\r\n\r\n  useEffect(() => {\r\n    if (address) getContract();\r\n  }, [address, getContract]);\r\n\r\n  return contract;\r\n};","import { create as ipfsHttpClient } from \"ipfs-http-client\";\r\nimport axios from \"axios\";\r\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\r\nimport NFTMarketplaceContractAddress from \"../contracts/NFTMarketplace-address.json\";\r\nimport { BigNumber, ethers } from \"ethers\";\r\n\r\n// initialize IPFS\r\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\r\n\r\n// mint an NFT\r\nexport const createNft = async (\r\n  minterContract,\r\n  marketplaceContract,\r\n  performActions,\r\n  { name, price, description, ipfsImage, ownerAddress, attributes }\r\n) => {\r\n  await performActions(async (kit) => {\r\n    if (!name || !description || !ipfsImage) return;\r\n    const { defaultAccount } = kit;\r\n\r\n    // convert NFT metadata to JSON format\r\n    const data = JSON.stringify({\r\n      name,\r\n      description,\r\n      image: ipfsImage,\r\n      owner: defaultAccount,\r\n      attributes,\r\n    });\r\n\r\n    try {\r\n      // save NFT metadata to IPFS\r\n      const added = await client.add(data);\r\n\r\n      // IPFS url for uploaded metadata\r\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\r\n\r\n      // mint the NFT and save the IPFS url to the blockchain\r\n      let transaction = await minterContract.methods\r\n        .mint(url)\r\n        .send({ from: defaultAccount });\r\n\r\n      let africaPrintCount = BigNumber.from(\r\n        transaction.events.Transfer.returnValues.tokenId\r\n      );\r\n\r\n      const africaPrintPrice = ethers.utils.parseUnits(String(price), \"ether\");\r\n      console.log(africaPrintPrice);\r\n\r\n      await minterContract.methods\r\n        .approve(NFTMarketplaceContractAddress.NFTMarketplace, africaPrintCount)\r\n        .send({ from: kit.defaultAccount });\r\n\r\n      await marketplaceContract.methods\r\n        .listAfricaPrint(MyNFTContractAddress.MyNFT, africaPrintCount, africaPrintPrice)\r\n        .send({ from: defaultAccount });\r\n\r\n      return transaction;\r\n    } catch (error) {\r\n      console.log(\"Error uploading file: \", error);\r\n    }\r\n  });\r\n};\r\n\r\n// function to upload a file to IPFS\r\nexport const uploadToIpfs = async (e) => {\r\n  const file = e.target.files[0];\r\n  if (!file) return;\r\n  try {\r\n    const added = await client.add(file, {\r\n      progress: (prog) => console.log(`received: ${prog}`),\r\n    });\r\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\r\n  } catch (error) {\r\n    console.log(\"Error uploading file: \", error);\r\n  }\r\n};\r\n\r\n// fetch all NFTs on the smart contract\r\nexport const getNfts = async (minterContract, marketplaceContract) => {\r\n  try {\r\n    const nfts = [];\r\n    const nftsLength = await marketplaceContract.methods\r\n      .getAfricaPrintCount()\r\n      .call();\r\n\r\n    // contract starts minting from index 1\r\n    for (let i = 1; i <= Number(nftsLength); i++) {\r\n      const nft = new Promise(async (resolve) => {\r\n        const africaPrint = await marketplaceContract.methods.getAfricaPrint(i).call();\r\n        const res = await minterContract.methods\r\n          .tokenURI(africaPrint.tokenId)\r\n          .call();\r\n\r\n        const meta = await fetchNftMeta(res);\r\n        resolve({\r\n          index: i,\r\n          nft: africaPrint.nft,\r\n          tokenId: africaPrint.tokenId,\r\n          price: africaPrint.price,\r\n          seller: africaPrint.seller,\r\n          sold: africaPrint.sold,\r\n          forSale: africaPrint.forSale,\r\n          owner:meta.data.owner,\r\n          name: meta.data.name,\r\n          image: meta.data.image,\r\n          description: meta.data.description,\r\n          attributes: meta.data.attributes,\r\n        });\r\n      });\r\n      nfts.push(nft);\r\n    }\r\n    return Promise.all(nfts);\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the metedata for an NFT from IPFS\r\nexport const fetchNftMeta = async (ipfsUrl) => {\r\n  try {\r\n    if (!ipfsUrl) return null;\r\n    const meta = await axios.get(ipfsUrl);\r\n    return meta;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the owner address of an NFT\r\nexport const fetchNftOwner = async (minterContract, index) => {\r\n  try {\r\n    return await minterContract.methods.ownerOf(index).call();\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\n// get the address that deployed the NFT contract\r\nexport const fetchNftContractOwner = async (minterContract) => {\r\n  try {\r\n    let owner = await minterContract.methods.owner().call();\r\n    return owner;\r\n  } catch (e) {\r\n    console.log({ e });\r\n  }\r\n};\r\n\r\nexport const purchaseItem = async (\r\n  minterContract,\r\n  marketplaceContract,\r\n  performActions,\r\n  index,\r\n  tokenId\r\n) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      try {\r\n        console.log(marketplaceContract, index);\r\n        const { defaultAccount } = kit;\r\n        const africaPrint = await marketplaceContract.methods\r\n          .getAfricaPrint(index)\r\n          .call();\r\n        await marketplaceContract.methods\r\n          .buyAfricaPrint(index)\r\n          .send({ from: defaultAccount, value: africaPrint.price });\r\n      } catch (error) {\r\n        console.log({ error });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const toggleForsale = async (\r\n  minterContract,\r\n  marketplaceContract,\r\n  performActions,\r\n  index,\r\n) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      try {\r\n        console.log(marketplaceContract, index);\r\n        const { defaultAccount } = kit;\r\n        await marketplaceContract.methods\r\n          .toggleForSale(index)\r\n          .send({ from: defaultAccount});\r\n      } catch (error) {\r\n        console.log({ error });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\nexport const changePrice = async (\r\n  minterContract,\r\n  marketplaceContract,\r\n  performActions,\r\n  newPrice,\r\n  index,\r\n  \r\n) => {\r\n  try {\r\n    await performActions(async (kit) => {\r\n      try {\r\n        console.log(marketplaceContract, index);\r\n        const { defaultAccount } = kit;\r\n\r\n        const newAfricaPrintPrice = ethers.utils.parseUnits(String(newPrice), \"ether\");\r\n      console.log(newAfricaPrintPrice);\r\n\r\n        await marketplaceContract.methods\r\n          .modifyAfricaPrintPrice(newAfricaPrintPrice, index)\r\n          .send({ from: defaultAccount});\r\n      } catch (error) {\r\n        console.log({ error });\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\nimport { uploadToIpfs } from \"../../../utils/minter\";\r\n\r\n// basic attributes that can be added to NFT\r\n\r\nconst AFRICAPRINTSTYPE = [\"Kente\", \"Ankara\", \"Shweshwe\", \"Kongo\", \"Aso Oke\", \"Kitenge\", \"Ukara\", \"Others\"] ;\r\n\r\nconst AddNfts = ({ save, address }) => {\r\n  const [name, setName] = useState(\"\");\r\n  const [price, setPrice] = useState(0);\r\n  const [ipfsImage, setIpfsImage] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n\r\n  //store attributes of an NFT\r\n  const [attributes, setAttributes] = useState([]);\r\n  const [show, setShow] = useState(false);\r\n\r\n  // check if all form data has been filled\r\n  const isFormFilled = () =>\r\n    name && ipfsImage && description && attributes.length === 1;\r\n\r\n  // close the popup modal\r\n  const handleClose = () => {\r\n    setShow(false);\r\n    setAttributes([]);\r\n  };\r\n\r\n  // display the popup modal\r\n  const handleShow = () => setShow(true);\r\n\r\n  // add an attribute to an NFT\r\n  const setAttributesFunc = (e, trait_type) => {\r\n    const { value } = e.target;\r\n    const attributeObject = {\r\n      trait_type,\r\n      value,\r\n    };\r\n    const arr = attributes;\r\n\r\n    // check if attribute already exists\r\n    const index = arr.findIndex((el) => el.trait_type === trait_type);\r\n\r\n    if (index >= 0) {\r\n      // update the existing attribute\r\n      arr[index] = {\r\n        trait_type,\r\n        value,\r\n      };\r\n      setAttributes(arr);\r\n      return;\r\n    }\r\n\r\n    // add a new attribute\r\n    setAttributes((oldArray) => [...oldArray, attributeObject]);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Button\r\n        onClick={handleShow}\r\n        variant=\"dark\"\r\n        className=\"rounded-pill px-2\"\r\n      >\r\n        Create Collection\r\n      </Button>\r\n\r\n      {/* Modal */}\r\n      <Modal show={show} onHide={handleClose} centered>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Create NFT</Modal.Title>\r\n        </Modal.Header>\r\n\r\n        <Modal.Body>\r\n          <Form>\r\n            <FloatingLabel\r\n              controlId=\"inputLocation\"\r\n              label=\"Name\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Name of NFT\"\r\n                onChange={(e) => {\r\n                  setName(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputDescription\"\r\n              label=\"Description\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"description\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <FloatingLabel\r\n              controlId=\"inputPrice\"\r\n              label=\"Price\"\r\n              className=\"mb-3\"\r\n            >\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                placeholder=\"Price\"\r\n                style={{ height: \"80px\" }}\r\n                onChange={(e) => {\r\n                  setPrice(e.target.value);\r\n                }}\r\n              />\r\n            </FloatingLabel>\r\n\r\n            <Form.Control\r\n              type=\"file\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                const imageUrl = await uploadToIpfs(e);\r\n                if (!imageUrl) {\r\n                  alert(\"failed to upload image\");\r\n                  return;\r\n                }\r\n                setIpfsImage(imageUrl);\r\n              }}\r\n              placeholder=\"Product name\"\r\n            ></Form.Control>\r\n            <Form.Label>\r\n              <h5>Properties</h5>\r\n            </Form.Label>\r\n\r\n            \r\n\r\n            <Form.Control\r\n              as=\"select\"\r\n              className={\"mb-3\"}\r\n              onChange={async (e) => {\r\n                setAttributesFunc(e, \"africaPrints Type\");\r\n              }}\r\n              placeholder=\"africaPrints Type\"\r\n            >\r\n              <option hidden>africaPrints Type</option>\r\n              {AFRICAPRINTSTYPE.map((africaPrintsType) => (\r\n                <option\r\n                  key={`africaPrintType-${africaPrintsType.toLowerCase()}`}\r\n                  value={africaPrintsType.toLowerCase()}\r\n                >\r\n                  {africaPrintsType}\r\n                </option>\r\n              ))}\r\n            </Form.Control>\r\n          </Form>\r\n        </Modal.Body>\r\n\r\n        <Modal.Footer>\r\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n            Close\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"dark\"\r\n            disabled={!isFormFilled()}\r\n            onClick={() => {\r\n              save({\r\n                name,\r\n                price,\r\n                ipfsImage,\r\n                description,\r\n                ownerAddress: address,\r\n                attributes,\r\n              });\r\n              handleClose();\r\n            }}\r\n          >\r\n            Create NFT\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nAddNfts.propTypes = {\r\n  // props passed into this component\r\n  save: PropTypes.func.isRequired,\r\n  address: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default AddNfts;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\r\nimport { truncateAddress } from \"../../../utils\";\r\nimport Identicon from \"../../ui/Identicon\";\r\nimport { useEffect, useState, useCallback } from \"react\";\r\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\r\n\r\n\r\n  const NftCard = ({ nft, purchaseItem, isSold, isOwner, isForsale, toggleForsale, modPrice, contractOwner }) => {\r\n  const { owner, price, image, description, name, index, attributes } = nft;\r\n  const [newPrice, setnewPrice] = useState(0);\r\n  const [editPrice, setEditprice] = useState(false)\r\n  const [showEditButton, setShowEditButton] = useState(true)\r\n  \r\n\r\n\r\n\r\n  const handleChangePrice = (newPrice)=>{\r\n      modPrice(newPrice, index);\r\n      setEditprice(prevState => !prevState)\r\n      setShowEditButton(prevState => !prevState)\r\n  }\r\n\r\n  const handleEditPrice = () => {\r\n    setEditprice(prevState => !prevState)\r\n    setShowEditButton(prevState => !prevState)\r\n  }\r\n\r\n  return (\r\n    <Col key={index}>\r\n      <Card className=\" h-100\">\r\n        <Card.Header>\r\n          <Stack direction=\"horizontal\" gap={2}>\r\n            <Identicon address={owner} size={28} />\r\n            <span className=\"font-monospace text-secondary\">\r\n              {truncateAddress(owner)}\r\n            </span>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {index} ID\r\n            </Badge>\r\n            <Badge bg=\"secondary\" className=\"ms-auto\">\r\n              {price / 10 ** 18} CELO\r\n            </Badge>\r\n          </Stack>\r\n        </Card.Header>\r\n\r\n        <div className=\" ratio ratio-4x3\">\r\n          <img className=\"nft-image\" src={image} alt={description} style={{ objectFit: \"cover\" }} />\r\n        </div>\r\n\r\n        <Card.Body className=\"d-flex  flex-column text-center\">\r\n          <Card.Title>{name}</Card.Title>\r\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\r\n          <div>\r\n            <Row className=\"mt-2\">\r\n              {attributes.map((attribute, key) => (\r\n                <Col key={key}>\r\n                  <div className=\"border rounded bg-dark\">\r\n                    <div className=\"text-secondary fw-lighter small text-capitalize\">\r\n                      {attribute.trait_type}\r\n                    </div>\r\n                    <div className=\"text-secondary text-capitalize font-monospace\">\r\n                      {attribute.value}\r\n                    </div>\r\n                  </div>\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n          </div>\r\n\r\n          {isSold ? (\r\n            <div className=\"d-flex m-2 justify-content-center\">\r\n              <button\r\n                className={`btn ${isOwner ? \"btn-danger\" : \"btn-secondary\"}`}\r\n              >\r\n                {isOwner ? \"You bought this item\" : \"This item has been sold\"}\r\n              </button>\r\n\r\n            </div>\r\n          ) : (\r\n            \r\n            <div className=\"d-flex m-2 justify-content-center\">\r\n               \r\n              <button  onClick={purchaseItem} className=\"btn btn-primary btn-lg w-100\" style={{backgroundImage:\"linear-gradient(315deg, #000428 0%, #004e92 74%)\"}} >\r\n                Buy\r\n              </button>\r\n            </div>\r\n            \r\n          )}\r\n\r\n\r\n\r\n              {showEditButton &&<Button\r\n                type=\"buton\"\r\n                style={{backgroundColor:\"grey\"}} \r\n                classNmae=\"btn btn-secondary\"\r\n                onClick={handleEditPrice} \r\n              >\r\n                Change Item Price\r\n              </Button>}\r\n\r\n      {editPrice && contractOwner === owner && (\r\n            <>\r\n               <Form.Control\r\n                className={\"pt-2 mb-1\"}\r\n                type=\"text\"\r\n                placeholder=\"Enter new price\"\r\n                onChange={(e) => {\r\n                  setnewPrice(e.target.value);\r\n                }}\r\n              />\r\n              <Button\r\n                variant=\"primary\"\r\n                onClick={() => handleChangePrice(newPrice)}\r\n              >\r\n                Change Item price\r\n              </Button>\r\n            </>\r\n          )}\r\n\r\n  \r\n\r\n        </Card.Body>\r\n      </Card>\r\n    </Col>\r\n\r\n  );\r\n};\r\n\r\nNftCard.propTypes = {\r\n  // props passed into this component\r\n  nft: PropTypes.instanceOf(Object).isRequired,\r\n  modPrice: PropTypes.func.isRequired,\r\n\r\n};\r\n\r\nexport default NftCard;\r\n","import React from \"react\";\r\nimport { Spinner } from \"react-bootstrap\";\r\n\r\nconst Loader = () => (\r\n  <div className=\"d-flex justify-content-center\">\r\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\r\n      <span className=\"visually-hidden\">Loading...</span>\r\n    </Spinner>\r\n  </div>\r\n);\r\nexport default Loader;\r\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport PropTypes from \"prop-types\";\r\nimport AddNfts from \"./Add\";\r\nimport Nft from \"./Card\";\r\nimport Loader from \"../../ui/Loader\";\r\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\r\nimport { getNfts, createNft, purchaseItem, toggleForsale, changePrice } from \"../../../utils/minter\";\r\nimport { Row } from \"react-bootstrap\";\r\n\r\nconst NftList = ({ minterContract, marketplaceContract, name }) => {\r\n  /* performActions : used to run smart contract interactions in order\r\n   *  address : fetch the address of the connected wallet\r\n   */\r\n  const { performActions, address } = useContractKit();\r\n  const [nfts, setNfts] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const getAssets = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // fetch all nfts from the smart contract\r\n      const allNfts = await getNfts(minterContract, marketplaceContract);\r\n      if (!allNfts) return;\r\n      setNfts(allNfts);\r\n    } catch (error) {\r\n      console.log({ error });\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [marketplaceContract, minterContract]);\r\n\r\n  const addNft = async (data) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // create an nft functionality\r\n      await createNft(\r\n        minterContract,\r\n        marketplaceContract,\r\n        performActions,\r\n        data\r\n      );\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const buy = async (index, tokenId) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      await purchaseItem(\r\n        minterContract,\r\n        marketplaceContract,\r\n        performActions,\r\n        index,\r\n        tokenId\r\n      );\r\n\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const toggleSale = async (index) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      await toggleForsale(\r\n        minterContract,\r\n        marketplaceContract,\r\n        performActions,\r\n        index\r\n      );\r\n\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to toggle an NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const modifyPrice = async (newPrice, index) => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      await changePrice(\r\n        minterContract,\r\n        marketplaceContract,\r\n        performActions,\r\n        newPrice,\r\n        index,\r\n        \r\n      );\r\n\r\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\r\n      getAssets();\r\n    } catch (error) {\r\n      console.log({ error });\r\n      toast(<NotificationError text=\"Failed to change price of NFT.\" />);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (address && minterContract) {\r\n        getAssets();\r\n      }\r\n    } catch (error) {\r\n      console.log({ error });\r\n    }\r\n  }, [minterContract, address, getAssets]);\r\n  if (address) {\r\n    return (\r\n      <>\r\n        {!loading ? (\r\n          <>\r\n            <div className=\"d-flex justify-content-between align-items-center mb-4\">\r\n              <h1 className=\"fs-4 fw-bold mb-0\">{name}</h1>\r\n\r\n              <AddNfts save={addNft} address={address} />\r\n            </div>\r\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5\">\r\n              {/* display all NFTs */}\r\n              {nfts.map((_nft) => (\r\n                <Nft\r\n                  key={_nft.index}\r\n                  contractOwner={address}\r\n                  purchaseItem={() => buy(_nft.index, _nft.tokenId)}\r\n                  toggleForsale={() => toggleSale(_nft.index)}\r\n                  modPrice= {modifyPrice}\r\n                  nft={{\r\n                    ..._nft,\r\n                  }}\r\n                  isOwner={_nft.owner === address}\r\n                  isSold={_nft.sold}\r\n                  isForsale = {_nft.forSale}\r\n                  \r\n                />\r\n              ))}\r\n            </Row>\r\n          </>\r\n        ) : (\r\n          <Loader />\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nNftList.propTypes = {\r\n  // props passed into this component\r\n  minterContract: PropTypes.instanceOf(Object),\r\n  marketplaceContract: PropTypes.instanceOf(Object),\r\n  updateBalance: PropTypes.func.isRequired,\r\n};\r\n\r\nNftList.defaultProps = {\r\n  minterContract: null,\r\n  marketplaceContract: null,\r\n};\r\n\r\nexport default NftList;\r\n","import React from \"react\";\r\nimport Cover from \"./components/minter/Cover\";\r\nimport {Notification} from \"./components/ui/Notifications\";\r\nimport Wallet from \"./components/Wallet\";\r\nimport {useBalance, useMinterContract, useMarketplaceContract} from \"./hooks\";\r\nimport Nfts from \"./components/minter/nfts\";\r\nimport {useContractKit} from \"@celo-tools/use-contractkit\";\r\nimport \"./App.css\";\r\nimport {Container, Nav} from \"react-bootstrap\";\r\n\r\nconst App = function AppWrapper() {\r\n  \r\n    const {address, destroy, connect} = useContractKit();\r\n    const {balance, getBalance} = useBalance();\r\n\r\n    // initialize the NFT mint contract\r\n    const minterContract = useMinterContract();\r\n\r\n     // initialize the NFT marketplace contract\r\n     const marketplaceContract = useMarketplaceContract();\r\n\r\n    return (\r\n        <>\r\n            <Notification/>\r\n\r\n            {address ? (\r\n                <Container fluid=\"md\">\r\n                    <Nav className=\"justify-content-end pt-3 pb-5\">\r\n                        <Nav.Item>\r\n\r\n                            {/*display user wallet*/}\r\n                            <Wallet\r\n                                address={address}\r\n                                amount={balance.CELO}\r\n                                symbol=\"CELO\"\r\n                                destroy={destroy}\r\n                            />\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                    <main>\r\n\r\n                        {/*list NFTs*/}\r\n                        <Nfts\r\n                            name=\"Africa Wax Prints Collections\"\r\n                            updateBalance={getBalance}\r\n                            minterContract={minterContract}\r\n                            marketplaceContract={marketplaceContract}\r\n                        />\r\n                    </main>\r\n                </Container>\r\n            ) : (\r\n                //  if user wallet is not connected display cover page\r\n                <Cover name=\"Welocome to Africa Wax Prints Collections\" coverImg=\"https://drive.google.com/uc?export=view&id=1kYQANWHOCbeWvqt-Ro7uocfSVjdBy8Fn\" connect={connect}/>\r\n            )}\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;","import { useState, useEffect, useCallback } from \"react\";\r\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\r\n\r\nexport const useBalance = () => {\r\n  const { address, kit } = useContractKit();\r\n  const [balance, setBalance] = useState(0);\r\n\r\n  const getBalance = useCallback(async () => {\r\n    // fetch a connected wallet token balance\r\n    const value = await kit.getTotalBalance(address);\r\n    setBalance(value);\r\n  }, [address, kit]);\r\n\r\n  useEffect(() => {\r\n    if (address) getBalance();\r\n  }, [address, getBalance]);\r\n\r\n  return {\r\n    balance,\r\n    getBalance,\r\n  };\r\n};\r\n","import { useContract } from \"./useContract\";\r\nimport MyNFTAbi from \"../contracts/MyNFT.json\";\r\nimport MyNFTContractAddress from \"../contracts/MyNFT-address.json\";\r\n\r\nexport const useMinterContract = () =>\r\n  useContract(MyNFTAbi.abi, MyNFTContractAddress.MyNFT);","import { useContract } from \"./useContract\";\r\nimport NFTMarketplaceAbi from \"../contracts/NFTMarketplace.json\";\r\nimport NFTMarketplace from \"../contracts/NFTMarketplace-address.json\";\r\n\r\nexport const useMarketplaceContract = () =>\r\n  useContract(NFTMarketplaceAbi.abi, NFTMarketplace.NFTMarketplace);\r\n","const reportWebVitals = (onPerfEntry) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({\r\n      getCLS, getFID, getFCP, getLCP, getTTFB,\r\n    }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  ContractKitProvider,\r\n  Alfajores,\r\n  NetworkNames,\r\n} from \"@celo-tools/use-contractkit\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\r\nimport \"react-toastify/dist/ReactToastify.min.css\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ContractKitProvider\r\n      networks={[Alfajores]}\r\n      network={{\r\n        name: NetworkNames.Alfajores,\r\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\r\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\r\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\r\n        chainId: 44787,\r\n      }}\r\n      dapp={{\r\n        name: \"Africa Wax Prints NFT Marketplace\",\r\n        description: \"A React Dapp for selling Africa Wax Prints nfts\",\r\n      }}\r\n    >\r\n      <App />\r\n    </ContractKitProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}